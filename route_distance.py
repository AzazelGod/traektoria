import argparse
import csv
import json
import os
import requests
import sys
import time
import pandas as pd
from datetime import datetime, timedelta, time as dt_time
import re
import random
import math
from typing import List, Dict, Any, Optional

import config
from utils import ensure_data_dirs, get_api_key

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é sanitize_filename –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def sanitize_filename(filename):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ –µ–¥–∏–Ω–æ–º—É –ø—Ä–∞–≤–∏–ª—É"""
    if not isinstance(filename, str):
        return "unnamed"
    
    # –ü—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    s = filename.strip().replace(' ', '_')
    return s if s else "unnamed"

ensure_data_dirs()

def parse_args():
    parser = argparse.ArgumentParser(description='Calculate route distances for a sequence of points.')
    parser.add_argument('--geocoded_file', type=str, help='Path to geocoded results file.')
    parser.add_argument('--route_name', type=str, help='Name of the route to process.')
    parser.add_argument('--output_path', type=str, help='Path to save the route results.')
    parser.add_argument('--traffic_mode', type=str, choices=['jam', 'statistics'], default='statistics', 
                       help='Traffic mode: "jam" for current traffic, "statistics" for historical data at 9:00 AM')
    return parser.parse_args()

def get_input_file_path(route_name, geocoded_file_arg=None):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    if geocoded_file_arg:
        return geocoded_file_arg
    
    if route_name:
        # Try to find route-specific geocoded file
        safe_name = sanitize_filename(route_name)
        route_specific_file = os.path.join(config.GEOCODED_DIR, f"geocoded_results_{safe_name}.csv")
        if os.path.exists(route_specific_file):
            return route_specific_file
        else:
            print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞: {route_specific_file}")
            # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å None –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è, —Ä–µ—à–∏–º –ø–æ —Ö–æ–¥—É
            # return os.path.join(config.GEOCODED_DIR, "geocoded_results.csv") # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è? 
            return None # –õ—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å None, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    
    # Default to the standard filename if no route_name provided
    # return os.path.join(config.GEOCODED_DIR, "geocoded_results.csv")
    return None # –ï—Å–ª–∏ –∏–º—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ, —Ñ–∞–π–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å

def calculate_route_in_chunks(points, api_key, start_time_iso, traffic_mode='statistics'):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞.
    
    Args:
        points: –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"lat": float, "lon": float}, ...]
        api_key: API –∫–ª—é—á 2GIS
        start_time_iso: ISO 8601 UTC –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        traffic_mode: –†–µ–∂–∏–º —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–±–æ–∫ ('jam' –∏–ª–∏ 'statistics')
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –∫–∞–∂–¥–æ–π –ø–∞—Ä–æ–π —Ç–æ—á–µ–∫
    """
    results = []
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–∞—Ä–∞–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫
    for i in range(len(points) - 1):
        point_pair = [points[i], points[i + 1]]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –ø–∞—Ä–æ–π —Ç–æ—á–µ–∫
        print(f"[calculate_route_in_chunks] –í—ã–∑–æ–≤ calculate_matrix_chunk –¥–ª—è –ø–∞—Ä—ã {i}-{i+1} —Å start_time: {start_time_iso}, mode: {traffic_mode}")
        chunk_result = calculate_matrix_chunk(point_pair, api_key, start_time_iso=start_time_iso, traffic_mode=traffic_mode)
        
        if chunk_result:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–∞—Ä—ã —Ç–æ—á–µ–∫
            pair_result = chunk_result.get("0:1", {})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–∫–∞—Ö –∏ –∏–Ω–¥–µ–∫—Å–∞—Ö
            result = {
                "from_index": i,
                "to_index": i + 1,
                "from_point": point_pair[0],
                "to_point": point_pair[1],
                "distance": pair_result.get("distance", 0),
                "duration": pair_result.get("duration", 0),
                "status": pair_result.get("status", "ERROR")
            }
            
            results.append(result)
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–∞—Ä–∞ —Ç–æ—á–µ–∫ {i} -> {i+1}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä—ã —Ç–æ—á–µ–∫ {i} -> {i+1}")
            results.append({
                "from_index": i,
                "to_index": i + 1,
                "from_point": point_pair[0],
                "to_point": point_pair[1],
                "distance": 0,
                "duration": 0,
                "status": "ERROR"
            })
    
    return results

def calculate_matrix_chunk(points, api_key, start_time_iso, traffic_mode='statistics'):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞,
    –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞, –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é test_2gis_api.py.

    Args:
        points: –°–ø–∏—Å–æ–∫ –∏–∑ –¥–≤—É—Ö —Ç–æ—á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"lat": float, "lon": float}, ...]
        api_key: API –∫–ª—é—á 2GIS
        start_time_iso: ISO 8601 UTC –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        traffic_mode: –†–µ–∂–∏–º —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–±–æ–∫ ('jam' –∏–ª–∏ 'statistics')

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏,
        –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    if len(points) != 2:
        print(f"‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 2 —Ç–æ—á–∫–∏, –ø–æ–ª—É—á–µ–Ω–æ: {len(points)}")
        return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º OFFLINE_MODE
    if hasattr(config, 'OFFLINE_MODE') and config.OFFLINE_MODE:
        print("üîÑ –†–∞–±–æ—Ç–∞–µ–º –≤ OFFLINE —Ä–µ–∂–∏–º–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ API")
        try:
            lat_diff = points[1]["lat"] - points[0]["lat"]
            lon_diff = points[1]["lon"] - points[0]["lon"]
            distance_km = 111.0 * ((lat_diff**2 + lon_diff**2)**0.5)
            distance_m = int(distance_km * 1000 * (1 + random.uniform(0.1, 0.3)))
            duration_sec = int(distance_km / 40 * 3600)

            return {
                "0:1": {
                    "distance": distance_m,
                    "duration": duration_sec,
                    "status": "OK"
                }
            }
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    # –ï—Å–ª–∏ –Ω–µ –≤ OFFLINE —Ä–µ–∂–∏–º–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å API-–∑–∞–ø—Ä–æ—Å–∞–º–∏
    url = config.API_URLS["2gis_matrix"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL
    params = {
        "key": api_key,
        "version": "2.0"
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    payload = {
        "points": points,
        "sources": [0],             # –ò–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ points
        "targets": [1],             # –ò–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ points
        "transport": "driving",     # –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–∞–≤—Ç–æ–º–æ–±–∏–ª—å)
        "type": traffic_mode,       # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º ('statistics' –∏–ª–∏ –¥—Ä—É–≥–æ–π)
        "start_time": start_time_iso # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    }
    print(f"[calculate_matrix_chunk] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω payload: type={payload.get('type')}, start_time={payload.get('start_time')}")
    # print(f"   –¢–µ–ª–æ JSON: {json.dumps(payload)}") # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å User-Agent –∫–∞–∫ –≤ —Ç–µ—Å—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # "User-Agent": "PostroenieMarshrutov/1.0"
    }

    try:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API:")
        print(f"   URL: {url}")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã URL: {params}")
        print(f"   –¢–µ–ª–æ JSON: {json.dumps(payload, ensure_ascii=False)}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∫–ª—é—á–æ–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö URL –∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ç–µ–ª–µ
        response = requests.post(url, params=params, json=payload, headers=headers)

        print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API (–°—Ç–∞—Ç—É—Å: {response.status_code}):")
        if response.text:
             print(f"   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text[:500]}...") # –ü–µ—á–∞—Ç–∞–µ–º –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞

        if response.status_code == 200:
            response_data = response.json()

            if "routes" in response_data and response_data["routes"]:
                # –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–∞—Ä—ã 0 -> 1 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –≤ —Å–ø–∏—Å–∫–µ routes
                route_result = response_data["routes"][0]

                if route_result.get("status") == "OK":
                    distance = route_result.get("distance", 0)
                    duration = route_result.get("duration", 0)
                    print(f"  ‚úÖ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance/1000:.1f} –∫–º, –í—Ä–µ–º—è: {duration/60:.1f} –º–∏–Ω")
                    return {
                        "0:1": { # –ö–ª—é—á –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–∂–Ω–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å calculate_route_in_chunks
                            "distance": distance,
                            "duration": duration,
                            "status": "OK"
                        }
                    }
                else:
                    error_status = route_result.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: {error_status}")
                    return { "0:1": { "distance": 0, "duration": 0, "status": error_status } } # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            else:
                print("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö ('routes')")
                return None # –ò–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É?
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                 error_details = response.json()
                 error_message = error_details.get("message", response.text)
                 print(f"   –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_message}")
                 # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –º–æ–∂–µ–º –µ–≥–æ –∏–∑–≤–ª–µ—á—å
                 if isinstance(error_details, dict) and "message" in error_details:
                     return { "0:1": { "distance": 0, "duration": 0, "status": f"HTTP_{response.status_code}_{error_details.get('type', 'ERROR')}" } }
            except json.JSONDecodeError:
                 print(f"   –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON: {response.text[:200]}...")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            return { "0:1": { "distance": 0, "duration": 0, "status": f"HTTP_{response.status_code}" } }

    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")
        return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –ø—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–µ
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")
        return None

def save_distance_matrix_to_csv(points, matrix, route_name=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –≤ CSV —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"distance_matrix_{route_name}_{timestamp}.csv" if route_name else f"distance_matrix_{timestamp}.csv"
        
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫: ID —Ç–æ—á–µ–∫
            header = ['From', 'To', 'From Lat', 'From Lon', 'To Lat', 'To Lon', 'Distance (m)', 'Duration (sec)', 'Status', 'Reliability']
            writer.writerow(header)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º writerow –≤–º–µ—Å—Ç–æ writeheader –¥–ª—è csv.writer
            
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –≤ –º–∞—Ç—Ä–∏—Ü–µ
            for route in matrix:
                source_id = route.get("source_id")
                target_id = route.get("target_id")
                status = route.get("status", "UNKNOWN")
                reliability = route.get("reliability", 1)
                
                if source_id is not None and target_id is not None and source_id < len(points):
                    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                    from_idx = source_id
                    if from_idx < len(points):
                        from_point = points[from_idx]
                        from_lat = from_point.get("lat", "N/A")
                        from_lon = from_point.get("lon", "N/A")
                    else:
                        from_lat, from_lon = "N/A", "N/A"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
                    to_idx = target_id
                    if to_idx < len(points):
                        to_point = points[to_idx]
                        to_lat = to_point.get("lat", "N/A")
                        to_lon = to_point.get("lon", "N/A")
                    else:
                        to_lat, to_lon = "N/A", "N/A"
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
                    distance = route.get("distance", 0)
                    duration = route.get("duration", 0)
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
                    row = [
                        source_id, 
                        target_id, 
                        from_lat, 
                        from_lon,
                        to_lat, 
                        to_lon,
                        distance, 
                        duration, 
                        status,
                        reliability
                    ]
                    writer.writerow(row)
        
        print(f"‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filename}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: {e}")

def calculate_and_save_route(route_name, geocoded_file_path, output_dir=config.ROUTE_RESULTS_DIR, traffic_mode='jam', report_date_str=None):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –∏–∑ main(), —Ç–∞–∫ –∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π.
    
    Args:
        route_name (str): –ò–º—è –º–∞—Ä—à—Ä—É—Ç–∞.
        geocoded_file_path (str): –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏.
        output_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
        traffic_mode (str): –†–µ–∂–∏–º —É—á–µ—Ç–∞ –ø—Ä–æ–±–æ–∫ ('jam' –∏–ª–∏ 'statistics').
        report_date_str (str, optional): –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD. Defaults to None.
        
    Returns:
        bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    print(f"\n--- –ó–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞: {route_name} ---")
    print(f"   –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {geocoded_file_path}")
    print(f"   –†–µ–∂–∏–º –ø—Ä–æ–±–æ–∫: {traffic_mode}")
    print(f"   –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ (–ø–æ–ª—É—á–µ–Ω–æ): {report_date_str}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º OFFLINE —Ä–µ–∂–∏–º
    if hasattr(config, 'OFFLINE_MODE') and config.OFFLINE_MODE:
        print("\nüîå –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ OFFLINE —Ä–µ–∂–∏–º–µ! (–∏–∑ calculate_and_save_route)")
        # –õ–æ–≥–∏–∫–∞ OFFLINE —Ä–µ–∂–∏–º–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞) –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ —Å—é–¥–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    
    if not os.path.exists(geocoded_file_path):
        print(f"‚ùå –§–∞–π–ª {geocoded_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ JSON
    sanitized_name = sanitize_filename(route_name)
    output_path = os.path.join(output_dir, f"route_results_{sanitized_name}.json")
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á 2GIS
    api_key = get_api_key("2gis")
    if not api_key:
        print("‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –¥–ª—è '2gis' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.py –∏–ª–∏ –ø—É—Å—Ç–æ–π.")
        return False
    else:
        print("üîë API –∫–ª—é—á 2GIS —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")

    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ start_time_iso --- 
    start_time_iso = get_start_time_iso(report_date_str)
    if not start_time_iso:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (start_time) –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞).")
        return False # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç, –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
    print(f"   –í—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (start_time): {start_time_iso}")
    # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ –∏–∑ JSON --- 
    points_from_file = []
    try:
        with open(geocoded_file_path, 'r', encoding='utf-8') as f:
            geocoded_data = json.load(f) # –ß–∏—Ç–∞–µ–º JSON
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫
        if not isinstance(geocoded_data, list):
            print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {geocoded_file_path} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫.")
            return False
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        for point in geocoded_data:
            if isinstance(point, dict) and pd.notna(point.get('lat')) and pd.notna(point.get('lon')):
                try:
                    lat = float(point['lat'])
                    lon = float(point['lon'])
                    if -90 <= lat <= 90 and -180 <= lon <= 180:
                        points_from_file.append({"lat": lat, "lon": lon})
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ñ–∞–π–ª–µ {geocoded_file_path}: lat={lat}, lon={lon} (–≤—Ö–æ–¥: {point.get('input', '?')})")
                except (ValueError, TypeError):
                    print(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —á–∏—Å–ª–∞ –≤ —Ñ–∞–π–ª–µ {geocoded_file_path}: {point.get('lat')}, {point.get('lon')} (–≤—Ö–æ–¥: {point.get('input', '?')})")
            # else: # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—á–∫–∏ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            #     print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ç–æ—á–∫–∞ –∏–∑ {geocoded_file_path} –±–µ–∑ –≤–∞–ª–∏–¥–Ω—ã—Ö lat/lon: {point}")
                 
    except FileNotFoundError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —á—Ç–µ–Ω–∏—è: {geocoded_file_path}")
        return False
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON —Ñ–∞–π–ª–∞ {geocoded_file_path}: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON —Ñ–∞–π–ª–∞ {geocoded_file_path}: {e}")
        return False

    if not points_from_file:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤ —Ñ–∞–π–ª–µ {geocoded_file_path}")
        return False
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(points_from_file)} —Ç–æ—á–µ–∫ –∏–∑ {geocoded_file_path}")

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –≤ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü --- 
    points = []
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ñ–∏—Å–∞
        start_end_point = config.OFFICE_LOCATION
        point_name = start_end_point.get("name", "–°—Ç–∞—Ä—Ç–æ–≤–∞—è/–∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞")
        
        if not isinstance(start_end_point, dict) or "lat" not in start_end_point or "lon" not in start_end_point:
             print(f"‚ùå –û—à–∏–±–∫–∞: OFFICE_LOCATION –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –≤ config.py")
             return False
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –¢–û–õ–¨–ö–û —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ lat, lon ---
        office_coords = {"lat": start_end_point["lat"], "lon": start_end_point["lon"]}
        # points_from_file —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞—Ä–∏ –≤–∏–¥–∞ {"lat": ..., "lon": ...}
        points = [office_coords] + points_from_file + [office_coords]
        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
        print(f"üìç –î–æ–±–∞–≤–ª–µ–Ω {point_name} ({office_coords['lat']}, {office_coords['lon']}). –ò—Ç–æ–≥–æ —Ç–æ—á–µ–∫ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞: {len(points)}")
        
    except AttributeError:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ç–æ–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º
        print("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è OFFICE_LOCATION –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ config.py")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π/–∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏: {e}")
        return False
    
    # --- –†–∞—Å—á–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ --- 
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è {len(points)} —Ç–æ—á–µ–∫...")
    segments = calculate_route_in_chunks(points, api_key, start_time_iso, traffic_mode=traffic_mode)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—à–µ–ª —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω–æ
    if not segments:
         print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞.")
         # –†–µ—à–∞–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç?
         # –ü–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏–º –ø—É—Å—Ç–æ–π
         segments = [] 

    total_distance = sum(seg.get('distance', 0) for seg in segments if seg.get('status') == 'OK')
    total_duration = sum(seg.get('duration', 0) for seg in segments if seg.get('status') == 'OK')

    result_data = {
        "route_name": route_name,
        "points_count": len(points), 
        "calculation_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "total_distance": total_distance,
        "total_duration": total_duration,
        "segments": segments,
        # --- –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è --- 
        "start_time_used": start_time_iso 
        # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø --- 
    }
    
    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ --- 
    try:
        os.makedirs(output_dir, exist_ok=True) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –µ—Å—Ç—å
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(result_data, f, ensure_ascii=False, indent=2)
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_path}")
        print(f"üìè –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {total_distance/1000:.2f} –∫–º")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration//3600} —á {(total_duration%3600)//60} –º–∏–Ω")
        return True # –£—Å–ø–µ—Ö
    except IOError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON —Ñ–∞–π–ª–∞ {output_path}: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞: {e}")
        return False

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ï–ì–ú–ï–ù–¢–û–í --- 
def get_route_segments(points: List[Dict[str, float]], start_time_iso: Optional[str] = None, traffic_mode: str = 'statistics') -> List[Dict[str, Any]]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É calculate_route_in_chunks.
    
    Args:
        points: –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"lat": float, "lon": float}, ...]
        start_time_iso (str, optional): ISO 8601 UTC –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞. –ï—Å–ª–∏ None, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        traffic_mode (str): –†–µ–∂–∏–º —É—á–µ—Ç–∞ –ø—Ä–æ–±–æ–∫ ('jam' –∏–ª–∏ 'statistics').
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –æ–ø–∏—Å—ã–≤–∞—é—â–∏—Ö —Å–µ–≥–º–µ–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –≤—Ä–µ–º—è, —Å—Ç–∞—Ç—É—Å).
        –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Ç–æ—á–µ–∫ –º–µ–Ω—å—à–µ 2 –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    if len(points) < 2:
        print("‚ö†Ô∏è get_route_segments: –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —Ç–æ—á–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.")
        return []
        
    api_key = get_api_key("2gis")
    if not api_key:
        print("‚ùå get_route_segments: API –∫–ª—é—á 2GIS –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return [] 

    # --- –î–û–ë–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º start_time_iso, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ---
    if not start_time_iso:
        print("‚ö†Ô∏è get_route_segments: start_time_iso –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        start_time_iso = get_start_time_iso() # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if not start_time_iso:
             print("‚ùå get_route_segments: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –†–∞—Å—á–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
             return []
    # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---
             
    try:
        # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ calculate_route_in_chunks ---
        print(f"[get_route_segments] Calling calculate_route_in_chunks with start_time: {start_time_iso}, mode: {traffic_mode}")
        segments = calculate_route_in_chunks(points, api_key, start_time_iso=start_time_iso, traffic_mode=traffic_mode)
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
        return segments
    except Exception as e:
        print(f"‚ùå get_route_segments: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ calculate_route_in_chunks: {e}")
        return []
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò ---

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø --- 
def get_start_time_iso(report_date_str=None):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start_time API 2GIS –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601 UTC.

    Args:
        report_date_str (str, optional): –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'.
                                         –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è - 7 –¥–Ω–µ–π.
                                         Defaults to None.

    Returns:
        str: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DDTHH:MM:SSZ'.
             –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã.
    """
    target_date = None
    try:
        if report_date_str:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
            target_date = datetime.strptime(report_date_str, '%Y-%m-%d').date()
            print(f"[get_start_time_iso] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: {target_date}")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è –º–∏–Ω—É—Å 7 –¥–Ω–µ–π
            target_date = datetime.now().date() - timedelta(days=7)
            print(f"[get_start_time_iso] –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∞—Ç–∞: {target_date} (—Å–µ–≥–æ–¥–Ω—è - 7 –¥–Ω–µ–π)")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è 8:00
        target_datetime = datetime.combine(target_date, dt_time(8, 0, 0))

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ ISO 8601 UTC (–¥–æ–±–∞–≤–ª—è–µ–º 'Z')
        iso_string = target_datetime.isoformat() + "Z"
        print(f"[get_start_time_iso] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ start_time: {iso_string}")
        return iso_string

    except ValueError:
        print(f"[get_start_time_iso] –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –æ—Ç—á–µ—Ç–∞ '{report_date_str}'. –û–∂–∏–¥–∞–ª—Å—è 'YYYY-MM-DD'.")
        return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    except Exception as e:
        print(f"[get_start_time_iso] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ start_time: {e}")
        return None
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò ---

def main():
    args = parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    input_file = get_input_file_path(args.route_name, args.geocoded_file)
    if not input_file:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª JSON. –£–∫–∞–∂–∏—Ç–µ --route_name –∏–ª–∏ --geocoded_file.")
        sys.exit(1)
        
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω –ø–æ–ª–Ω—ã–π –ø—É—Ç—å)
    output_dir = config.ROUTE_RESULTS_DIR
    if args.output_path:
         # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–æ–ª–Ω—ã–π –ø—É—Ç—å, –±–µ—Ä–µ–º –µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
         output_dir = os.path.dirname(args.output_path)
         # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –µ–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å?
         # –ü–æ–∫–∞ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ calculate_and_save_route —Å–æ–∑–¥–∞—Å—Ç –µ–µ
         # –í–∞–∂–Ω–æ: calculate_and_save_route —Å–∞–º–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞, 
         # —Ç–∞–∫ —á—Ç–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å output_path –Ω–∞–ø—Ä—è–º—É—é –≤ –Ω–µ–µ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.

    # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    success = calculate_and_save_route(
        route_name=args.route_name, 
        geocoded_file_path=input_file, 
        output_dir=output_dir, 
        traffic_mode=args.traffic_mode or 'jam', # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∂–∏–º –∏–ª–∏ 'jam' –ø–æ —É–º–æ–ª—á.
        report_date_str=args.report_date_str
    )
    
    if not success:
        sys.exit(1) # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ —Ä–∞—Å—á–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è

if __name__ == "__main__":
    main()
