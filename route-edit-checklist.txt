# Чек-лист задач по реализации функционала редактирования маршрутов

## Этап 1: Доработка функции редактирования адреса
- [x] Модифицировать функцию `endEditAddress()` для сохранения изменений
- [x] Добавить обработку события по нажатию на иконку "карандашик" 
- [x] Реализовать переход ячейки с адресом в режим редактирования
- [x] Добавить маркировку измененных адресов для последующего геокодирования
- [x] Очищать поля "Найденный адрес" и "Координаты" после редактирования
- [x] Обновлять поле "Точность" на "❓ Требуется пересчет" после редактирования
- [x] Реализовать валидацию введенных адресов (проверка на пустые значения)
- [x] Добавить подсветку пустых адресов красным цветом
- [x] Добавить обработку ошибок при редактировании

## Доработки Этапа 1
- [x] Исправить ошибку при вводе пустого адреса (должен быть пустой текст, а не предыдущий адрес)
- [x] Добавить уведомление о наличии изменений при нажатии на кнопку пересчета
- [x] Исправить отображение уведомления при наличии пустых адресов
- [x] Исправить ошибку в консоли: `Failed to set the 'innerHTML' property on 'Element'` при обработке событий blur/keydown
- [x] Исправить поведение при нажатии Escape (адрес не должен сохраняться)
- [x] Оптимизировать обработку событий для избежания гонки событий между blur и keydown

## Этап 2: Реализация добавления новых точек
- [x] Создать функцию `addNewAddressRow()` для вставки новой строки
- [x] Добавить SVG-иконку "+" и сделать её видимой при наведении на строку
- [x] Реализовать обработчик события для кнопки добавления новой точки
- [x] Добавить анимацию появления новой строки в таблице
- [x] Реализовать автоматическое обновление нумерации строк после добавления
- [ ] Настроить стилизацию новой строки идентично существующим
- [x] Обновлять структуру данных маршрута после добавления новой точки

## Доработки Этапа 2
- [x] Изменить поведение кнопки "+" - должна появляться только при наведении на строку
- [x] Расположить кнопку "+" в правом верхнем углу выбранной строки (между текущей и предыдущей строкой)
- [x] Исправить оформление строк для сохранения корректного чередования цветов в таблице
- [x] Обеспечить правильное обновление чередования цветов после добавления новой строки
- [x] Обновить CSS-стили для корректного отображения кнопки добавления между строками
- [ ] Проверить CSS/JS на конфликты стилей, мешающие анимации высоты `#table-scroll-wrapper`.
- [ ] Проверить родительские контейнеры (`.results-table-container`, `.results-layout`, `.card`) на наличие стилей, ограничивающих высоту или мешающих плавной анимации высоты.

## Новые доработки Этапа 2
- [x] Исправить визуальное отличие добавленных строк от стиля основной таблицы (убрать левую синюю границу или другие отличительные стили)
- [x] Исправить работу кнопки "+" - сейчас строки добавляются только между определенными строками, а не там, где была нажата кнопка
- [x] Добавить поддержку многострочного ввода адресов с автоматическим изменением высоты поля при редактировании длинных адресов

## Этап 3: Реализация скрытия точек из расчета
- [x] Добавить SVG-иконку "глаз" для каждой строки
- [x] Реализовать появление иконки при наведении на строку
- [x] Создать функцию `toggleRowVisibility()` для переключения видимости
- [x] Добавить стили для скрытых точек (полупрозрачность)
- [ ] Реализовать плавную анимацию при скрытии/отображении точки
- [x] Обновить структуру данных для хранения информации о скрытых точках
- [ ] Реализовать логику исключения скрытых точек из расчета маршрута (требует проверки после реализации пересчета)

## Доработки Этапа 3
- [x] Сместить иконку "глаз" левее, чтобы она не перекрывала индекс строки
- [x] Сделать так, чтобы иконка "глаз" отображалась и у новых добавленных строк
- [ ] Реализовать плавную анимацию перехода строки в скрытое состояние и обратно (opacity) - **ОТЛОЖЕНО**
- [ ] После реализации пересчета маршрута убедиться, что скрытые строки реально не участвуют в расчете и не отправляются на сервер

## Этап 3.1: Реализация удаления строк
- [x] Создать HTML/CSS для кастомного контекстного меню (появляется по ПКМ на строке).
- [x] Добавить пункт "Удалить строку" в контекстное меню.
- [x] Реализовать показ/скрытие контекстного меню по правому клику на строке таблицы (`#geocoder-table`).
- [x] Добавить обработчик клика для пункта "Удалить строку" в меню.
- [x] Модифицировать/проверить функцию `removeAddressRow(rowIndex)` для удаления строки из данных и DOM.
- [x] Обеспечить обновление нумерации строк после удаления.
- [x] Запретить удаление строк "СТАРТ" и "ФИНИШ".
- [x] Реализовать анимацию плавного исчезновения удаляемой строки.

## Этап 4: Обновление логики пересчета маршрута (Клиент)
- [x] Модифицировать обработчик события для кнопки "Пересчет" (добавлена валидация, проверка изменений)
- [x] Уточнить функцию `collectModifiedData()`: должна собирать **актуальный список видимых точек** в текущем порядке (адреса, флаги `isModified`, `isHidden`, `isOffice`) для отправки на сервер. Удаленные точки не включаются.
- [x] Добавить функцию `validateAddresses()` для проверки корректности данных (пропускает скрытые строки).
- [x] Реализовать блокировку пересчета при наличии пустых адресов.
- [x] Добавить уведомление о необходимости заполнить все адреса.
- [ ] Реализовать отправку данных (массив точек из `collectModifiedData`) на сервер методом POST на эндпоинт `/api/recalculate-route`.
- [ ] Добавить анимацию загрузки (Lottie) на кнопке "Пересчет" на время выполнения запроса.
- [ ] Реализовать обработку **успешного** ответа от сервера: обновить `currentRoutesData`, сбросить `modifiedAddresses`, вызвать `updateDisplay`.
- [ ] Реализовать обработку **ошибок** ответа от сервера (вывод сообщения пользователю).
- [ ] Обновлять общую информацию о маршруте (расстояние, время) (автоматически через `updateDisplay`).

## Этап 5: Обновление серверной части
- [ ] Создать новый API-эндпоинт `POST /api/recalculate-route`.
- [ ] Реализовать обработку запроса: прием массива точек (адрес, lat/lon для неизмененных, флаги isModified/isHidden/isOffice).
- [ ] Оптимизировать геокодирование: обрабатывать только точки с флагом `isModified` или без координат.
- [ ] Обновить функции расчета маршрута: строить маршрут только по точкам, не имеющим флага `isHidden`, в порядке их следования в запросе.
- [ ] Настроить **перезапись** данных маршрута (JSON-файлов?) на сервере новым состоянием.
- [ ] Добавить обработку ошибок геокодирования/расчета и логирование на сервере.
- [ ] Реализовать возврат корректных данных (весь обновленный маршрут в стандартном формате) или сообщений об ошибках клиенту.

## Этап 6: Тестирование и отладка
- [ ] Протестировать редактирование существующего адреса + пересчет.
- [ ] Проверить добавление новых точек + пересчет.
- [ ] Протестировать функцию скрытия/отображения точек + пересчет.
- [ ] Протестировать удаление точек + пересчет.
- [ ] Протестировать **комбинацию** действий (редактирование + добавление + скрытие + удаление) + пересчет.
- [ ] Проверить пересчет маршрута без изменений.
- [ ] Проверить валидацию пустых адресов и отображение ошибок.
- [ ] Протестировать работу с большим количеством точек (производительность).
- [ ] Проверить обработку некорректных адресов (ответ сервера).
- [ ] Протестировать обработку ошибок сервера при пересчете.
- [ ] Исправить выявленные ошибки и уязвимости.
- [ ] Провести финальное тестирование всего функционала.

## Этап 7: Отладка обновления интерфейса после пересчета
- [ ] Проанализировать функцию `showMap` (и связанные): проверить очистку карты и обработку данных при повторном вызове.
- [ ] Проанализировать консоль браузера: найти ошибки JavaScript, возникающие ПОСЛЕ вызова `updateDisplay`.
- [ ] Проверить данные для инфо-карточек: убедиться в корректности данных от сервера и их обработки функциями `animateCounter`, `parseTimeToMinutes`, `formatMinutesToTime`.
- [ ] Определить стратегию обновления вкладки "Резюме" после пересчета (ручное/автоматическое).

# Ключевые правила работы

1. **Последовательная реализация этапов:**
   - Каждый этап должен быть полностью завершен перед переходом к следующему
   - По итогам каждого этапа проводить тестирование функционала

2. **Соблюдение стиля кода и интерфейса:**
   - Следовать существующим стилевым решениям проекта
   - Обеспечивать единообразие интерфейса и анимаций

3. **Безопасность и оптимизация:**
   - Все изменения вносятся максимально аккуратно
   - Основная логика программы не должна нарушаться
   - Оптимизировать код для работы с большим числом точек

4. **Проверка перед внесением изменений:**
   - Анализировать существующий код перед модификацией
   - Оценивать влияние изменений на работу всего приложения
   - Следить за сохранением обратной совместимости

5. **Методология разработки:**
   - Перед внесением изменений составлять план реализации
   - Изменения вносить поэтапно, с проверкой работоспособности
   - Регулярно проверять соответствие реализации требованиям ТЗ 