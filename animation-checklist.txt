# Чек-лист: Реализация плавной анимации высоты таблицы

Цель: Добиться плавной анимации изменения высоты контейнера таблицы при добавлении новой строки.

## Шаг 1: Диагностика (без редактирования кода)

- [x] **1.1. Определить элемент-обертку:**
    - [x] Найти в DOM (Инструменты разработчика -> Elements) точный `div` (например, `#table-scroll-wrapper`, `.results-table-container`), высота которого должна анимироваться. Записать его ID или селектор.
    - [x] **Выбранный элемент:** `#table-scroll-wrapper`

- [x] **1.2. Проверить CSS `transition`:**
    - [x] В Инструментах разработчика (-> Styles) проверить, есть ли у выбранного элемента свойство `transition`, включающее `height` или `max-height`.
    - [x] Убедиться, что `transition-duration` больше `0s`.
    - [x] Проверить, не переопределяется ли `transition` другими стилями (-> Computed).
    - [x] **Свойства `transition`:** `Найдено: transition: height 0.4s ease-out; - Корректно`

- [x] **1.3. Проверить изменение высоты в JS:**
    - [x] Проанализировать (в уме или просмотрев код `addNewAddressRow` и `updateDisplay`), как меняется высота элемента: через `style.height`, `style.maxHeight`, или автоматически?
    - [x] Наблюдать за изменением свойства `height`/`max-height` в Инструментах разработчика при добавлении строки.
    - [x] **Механизм изменения высоты:** `auto` (Код для `updateTableHeight()` в `step3_results.js` закомментирован)

- [x] **1.4. Проверить родительские элементы:**
    - [x] Проинспектировать родительские контейнеры выбранного элемента (`#results-container`, `.results-table-container`, `.results-layout`).
    - [x] Проверить наличие `overflow: hidden;` или `overflow: auto;` у родителей, которые могут обрезать или влиять на анимацию. (В HTML не найдено, требует проверки CSS)
    - [x] Проверить свойства `display` (особенно `flex`, `grid`) у родителей на предмет потенциальных конфликтов. (`.results-layout` вероятно flex/grid, но явных конфликтов в HTML нет, требует проверки CSS)
    - [x] **Проблемные стили родителей:** Не найдены в HTML (требуется дополнительная проверка CSS при необходимости).

- [x] **1.5. Проанализировать порядок действий в JS:**
    - [x] Определить, устанавливается ли новая высота *в том же синхронном блоке кода*, где строка добавляется/становится видимой, или есть небольшая задержка (`setTimeout`, `requestAnimationFrame`)?
    - [x] **Порядок установки высоты:** С задержкой (через `void offsetHeight` между установками `style.height` в `addNewAddressRow`).

- [x] **1.6. Использовать вкладку "Animations":**
    - [x] Открыть вкладку "Animations" в Инструментах разработчика.
    - [x] Добавить строку и посмотреть, регистрируется ли CSS-переход для `height`/`max-height`.
    - [x] **Результат вкладки "Animations":** Переход `height` для `#table-scroll-wrapper` есть, но выглядит так, будто таблица внутри резко увеличивается до начала плавной анимации контейнера.

## Результаты анализа (Шаг 1)

- **Основная причина резкого изменения высоты:** Отсутствие активного JavaScript-кода для управления высотой контейнера `#table-scroll-wrapper`. Высота изменяется автоматически (`auto`) при добавлении DOM-элементов.
- **Конфликт с CSS Transition:** Существующий CSS `transition` для `height` не может сработать, так как он не анимирует изменение на/с `auto`.
- **Потенциальное решение:** В коде (`step3_results.js`) найден закомментированный блок с функцией `updateTableHeight()`, который, вероятно, реализовывал необходимую логику. Его нужно будет восстановить или переписать на Шаге 2.
- **Требует проверки:** Необходимо проверить шаги 1.4 (родительские стили) и 1.5 (порядок выполнения JS), чтобы исключить другие возможные проблемы.
- **Родительские элементы (1.4):** В HTML-структуре родительских элементов (`#results-container`, `.results-table-container`, `.results-layout`) не обнаружено явных стилей (`overflow: hidden` и т.п.), которые могли бы блокировать анимацию. Потенциально, стили из CSS могут влиять, но пока нет явных проблем.
- **Порядок JS (1.5):** Функция `addNewAddressRow` уже содержит корректную логику для запуска анимации `height` контейнера: строка добавляется скрытой, высота контейнера изменяется от текущей к новой с использованием принудительного reflow (`void offsetHeight`) для запуска CSS `transition`.
- **Наблюдение анимации (1.6):** Вкладка "Animations" подтверждает, что CSS `transition` для `height` контейнера `#table-scroll-wrapper` запускается. Однако, есть визуальный эффект, что содержимое (таблица) увеличивается мгновенно, вызывая кратковременный скачок или появление скроллбара *до* или *в самом начале* плавной анимации высоты контейнера. Это может быть связано с тем, как новая строка (`<tr>`) влияет на `scrollHeight` контейнера сразу после добавления в DOM, еще до своей собственной анимации появления.

## Шаг 2: Внесение исправлений (требует редактирования кода)

- [ ] **2.1. Скорректировать/Проверить CSS:**
    - [ ] Убедиться, что у элемента-обертки (`#table-scroll-wrapper`) все еще задан корректный CSS `transition` (п. 1.2).
    - [ ] **Проверить CSS добавляемой строки (`tr.add-point-row` или аналогичный селектор):** Убедиться, что в начальном (скрытом) состоянии она имеет `overflow: hidden; max-height: 0; padding-top: 0; padding-bottom: 0; border-width: 0;` и т.п., чтобы не влиять на `scrollHeight` родителя до анимации.
    - [ ] **Рассмотреть переход на анимацию `max-height` для контейнера:** Если анимация `height` продолжает вызывать скачки, переход на `max-height` (см. Вариант А в 2.2) может быть более надежным решением. В этом случае CSS `transition` контейнера нужно будет изменить на `transition: max-height [duration] [timing-function];`.

- [ ] **2.2. Скорректировать/Проверить JavaScript (`addNewAddressRow`):**
    - [ ] **Вариант А (Анимация `max-height` - Рекомендуемый, если есть скачки):**
        - [ ] Установить контейнеру `#table-scroll-wrapper` стили `overflow: hidden; max-height: [текущая scrollHeight]px;` **до** добавления строки в DOM.
        - [ ] Добавить строку в DOM (она должна быть скрыта с помощью CSS, как в п. 2.1).
        - [ ] Сразу после добавления (используя `requestAnimationFrame` или `void offsetHeight`) установить контейнеру `max-height: [новая scrollHeight]px;`.
        - [ ] В обработчике `transitionend` для контейнера убрать `max-height` и `overflow` (`style.maxHeight = ''; style.overflow = '';`), чтобы позволить ему сжиматься при удалении строк.
        - [ ] Запустить анимацию появления самой строки (`tr`) *после* завершения анимации контейнера.
    - [ ] **Вариант Б (Проверка/Отладка текущей анимации `height`):**
        - [ ] **Проверить существующий код:** Убедиться, что последовательность (измерение -> установка нач. высоты -> reflow -> установка кон. высоты) выполняется корректно.
        - [ ] **Проверить момент измерения `scrollHeight`:** Убедиться, что `newContainerHeight = tableContainer.scrollHeight;` измеряется *после* добавления строки в DOM, но *до* того, как эта строка станет видимой и повлияет на поток (т.е. пока она еще скрыта стилями из п. 2.1).
        - [ ] Возможно, добавить явное `requestAnimationFrame` перед установкой конечной высоты вместо `void offsetHeight` для большей предсказуемости.
        - [ ] Убедиться, что обработчик `transitionend` корректно убирает явную `height`.
    - [ ] Проверить/Удалить/изменить стили родительских элементов (п.1.4), если предыдущие шаги не помогли (маловероятно).

## Шаг 3: Тестирование

- [ ] **3.1. Проверить анимацию:**
    - [ ] Добавить новую строку и убедиться, что изменение высоты контейнера происходит плавно.
    - [ ] Проверить на разных разрешениях экрана и при разном количестве строк.
- [ ] **3.2. Проверить отсутствие побочных эффектов:**
    - [ ] Убедиться, что другие элементы интерфейса не ломаются после изменений. 