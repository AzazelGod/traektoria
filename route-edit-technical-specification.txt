# Техническое задание на разработку функционала редактирования маршрутов

## 1. Введение

### 1.1 Цель проекта
Реализовать функционал редактирования точек маршрута на третьем шаге приложения, включая возможность корректировки адресов, добавления новых точек и пересчета маршрута с учетом внесенных изменений.

### 1.2 Текущая ситуация
В настоящее время в приложении реализован функционал отображения геокодированных адресов в таблице на третьем шаге. В интерфейсе присутствуют элементы для редактирования адресов ("карандашик") и кнопка пересчета маршрута, но данный функционал не активен. Требуется реализовать полноценное редактирование маршрутов с возможностью добавления новых точек.

### 1.3 Желаемый результат
Пользователь должен иметь возможность:
- Редактировать существующие адреса маршрута
- Добавлять новые точки между существующими адресами
- Скрывать отдельные точки из расчета маршрута
- Пересчитывать маршрут с учетом внесенных изменений
- Сохранять измененные маршруты для последующего использования

## 2. Функциональные требования

### 2.1 Редактирование существующих адресов
- При нажатии на иконку "карандашик" ячейка с адресом должна переходить в режим редактирования
- После ввода нового адреса и нажатия Enter, изменения должны сохраняться
- В полях "Найденный адрес" и "Координаты" должно появляться пустое значение, а в поле "Точность" - информация "❓ Требуется пересчет"

### 2.2 Добавление новых точек
- При наведении на строку таблицы должна появляться кнопка "+" для добавления новой точки
- При нажатии на "+" должна добавляться новая строка с пустым полем адреса
- Нумерация всех строк должна обновляться автоматически после добавления новой точки
- Новая строка должна иметь такой же стиль, как и остальные строки таблицы

### 2.3 Скрытие точек из расчета
- При наведении на строку таблицы должна появляться кнопка "глаз" для скрытия/отображения точки
- При нажатии на "глаз" строка должна становиться полупрозрачной и не учитываться при пересчете маршрута
- Должна быть возможность восстановления видимости точки повторным нажатием на "глаз"

### 2.4 Пересчет маршрута
- При нажатии на кнопку "Пересчет" должен запускаться процесс геокодирования измененных адресов
- После геокодирования должен выполняться пересчет расстояний и времени маршрута
- Обновленный маршрут должен отображаться на карте и в таблице
- Общая информация о маршруте (расстояние, время) должна обновляться

### 2.5 Валидация данных
- Пустые адреса должны подсвечиваться красным цветом
- Пересчет маршрута не должен выполняться при наличии пустых адресов
- Пользователь должен получать уведомление о необходимости заполнить все адреса перед пересчетом

### 2.6 Сохранение изменений
- Измененные данные должны сохраняться при переключении между маршрутами
- При наличии несохраненных изменений при переключении маршрута должен выводиться диалог подтверждения

## 3. Требования к пользовательскому интерфейсу

### 3.1 Стилизация кнопок редактирования
- Кнопка "карандашик" должна быть видна только при наведении на строку таблицы
- Кнопка "+" должна появляться при наведении на строку и располагаться в правом верхнем углу
- Кнопка "глаз" должна появляться при наведении на строку и располагаться слева от адреса
- Все кнопки должны иметь плавную анимацию появления/исчезновения (opacity: 0 -> 1)

### 3.2 Анимации и переходы
- При добавлении новой строки должна быть плавная анимация появления
- При переходе ячейки в режим редактирования должен быть плавный переход
- При скрытии точки из расчета должен быть плавный переход к полупрозрачному состоянию
- При выполнении пересчета должна отображаться анимация загрузки на кнопке "Пересчет"

### 3.3 Отображение ошибок
- Ячейки с пустыми адресами должны подсвечиваться светло-красным цветом
- Подсветка должна исчезать после ввода текста в поле
- При ошибках геокодирования или расчета маршрута должны отображаться соответствующие уведомления

### 3.4 Адаптивность
- Интерфейс редактирования должен корректно работать на различных устройствах
- Таблица должна сохранять горизонтальную прокрутку при уменьшении ширины экрана
- Кнопки и элементы управления должны быть достаточного размера для использования на сенсорных устройствах

## 4. Технические требования

### 4.1 Клиентская часть
- Доработать функцию `endEditAddress()` в step3_results.js для сохранения изменений
- Создать функцию `addNewAddressRow()` для добавления новых точек
- Реализовать функцию `toggleRowVisibility()` для скрытия точек из расчета
- Добавить функцию `validateAddresses()` для проверки корректности данных
- Создать функцию `collectModifiedData()` для сбора данных перед отправкой на сервер
- Обновить обработчик события для кнопки "Пересчет"

### 4.2 Серверная часть
- Создать новый API-эндпоинт `/api/recalculate-route` для пересчета маршрута с измененными данными
- Оптимизировать геокодирование для обработки только измененных адресов
- Обновить структуру данных для поддержки скрытых точек
- Обеспечить сохранение измененных маршрутов в системе
- Реализовать обработку ошибок при геокодировании и расчете маршрута

### 4.3 Структура данных
- Добавить поле для хранения информации о скрытых точках
- Обновить формат данных для передачи измененных адресов на сервер
- Обеспечить совместимость с существующей структурой данных маршрута

## 5. Тестирование

### 5.1 Сценарии тестирования
- Редактирование существующего адреса и проверка сохранения изменений
- Добавление новой точки и проверка обновления нумерации
- Скрытие точки из расчета и проверка изменения расстояния
- Редактирование нескольких точек и выполнение пересчета
- Проверка валидации пустых адресов и отображения ошибок
- Тестирование переключения между маршрутами с несохраненными изменениями

### 5.2 Граничные случаи
- Большое количество точек (проверка производительности)
- Некорректные адреса, которые не могут быть геокодированы
- Пустые адреса и попытка пересчета маршрута
- Добавление точки между первой и второй, между последней и предпоследней

### 5.3 Стратегия отката
- Хранить исходное состояние маршрута перед редактированием
- Обеспечить возможность возврата к исходному состоянию при ошибках
- Локализовать ошибки для отдельных точек без влияния на весь маршрут


## 7. План реализации

### 7.1 Этап 1: Доработка функции редактирования адреса
1. Модифицировать функцию `endEditAddress()` для сохранения изменений в структуре данных маршрута
2. Добавить маркировку измененных адресов для последующего геокодирования
3. Реализовать валидацию введенных адресов
4. Добавить обработку ошибок при редактировании

### 7.2 Этап 2: Реализация добавления новых точек
1. Создать функцию `addNewAddressRow()` для вставки новой строки
2. Добавить SVG-иконку "+" и её обработчик событий
3. Реализовать автоматическое обновление нумерации строк
4. Обеспечить анимацию появления новой строки

### 7.3 Этап 3: Реализация скрытия точек из расчета
1. Добавить SVG-иконку "глаз" для каждой строки
2. Создать функцию `toggleRowVisibility()` для переключения видимости
3. Добавить стили для скрытых точек с полупрозрачностью
4. Обновить структуру данных для хранения информации о скрытых точках

### 7.4 Этап 4: Обновление логики пересчета маршрута
1. Модифицировать обработчик события для кнопки "Пересчет"
2. Создать функцию сбора всех измененных и новых адресов
3. Реализовать отправку данных на сервер для геокодирования
4. Обновить функции обработки ответа и отображения результатов

### 7.5 Этап 5: Обновление серверной части
1. Создать новый API-эндпоинт `/api/recalculate-route`
2. Реализовать обработку данных и геокодирование измененных адресов
3. Обновить функции расчета маршрута с учетом скрытых точек
4. Добавить обработку ошибок и логирование

### 7.6 Этап 6: Тестирование и отладка
1. Провести тестирование всех реализованных функций
2. Исправить выявленные ошибки и уязвимости
3. Провести проверку граничных случаев
4. Оптимизировать производительность при работе с большим количеством точек