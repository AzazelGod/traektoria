# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤/geocoder.py

import requests
import argparse
import sys
import csv
import json
import os
import config
from utils import sanitize_filename, ensure_data_dirs

API_KEY = config.API_KEYS["2gis"]
BASE_URL = config.API_URLS["2gis_geocode"]

ensure_data_dirs()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–∏–ø–æ–≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–∑ 2–ì–ò–° –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Emoji + –∫–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# –§–æ—Ä–º–∞—Ç: '—Ç–∏–ø_2–≥–∏—Å': ('html_–æ–ø–∏—Å–∞–Ω–∏–µ', '–∫–æ–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
TYPE_DESCRIPTIONS = {
    # –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å -> 'exact'
    'building': ('<span class="accuracy-tag tag-exact">üè† –ó–¥–∞–Ω–∏–µ ‚Äî –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'exact'),
    'address': ('<span class="accuracy-tag tag-exact">üéØ –ê–¥—Ä–µ—Å ‚Äî –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'exact'),
    'poi': ('<span class="accuracy-tag tag-exact">üìç POI ‚Äî –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'exact'),
    'station_entrance': ('<span class="accuracy-tag tag-exact">üöá –í—Ö–æ–¥ –≤ –º–µ—Ç—Ä–æ ‚Äî –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'exact'),
    'attraction': ('<span class="accuracy-tag tag-exact">üèõÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'exact'),

    # –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å -> 'house', 'street', 'near'
    'street': ('<span class="accuracy-tag tag-street">üõ£Ô∏è –£–ª–∏—Ü–∞ ‚Äî —Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'street'),
    'crossroad': ('<span class="accuracy-tag tag-near">üö¶ –ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ ‚Äî —Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'near'),
    'route': ('<span class="accuracy-tag tag-street">üõ§Ô∏è –ú–∞—Ä—à—Ä—É—Ç ‚Äî —Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'street'),
    'parking': ('<span class="accuracy-tag tag-near">üÖøÔ∏è –ü–∞—Ä–∫–æ–≤–∫–∞ ‚Äî —Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'near'),
    'adm_div': ('<span class="accuracy-tag tag-locality">üèòÔ∏è –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç ‚Äî —Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'locality'), # –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç -> —Å—Ä–µ–¥–Ω—è—è -> locality

    # –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å -> 'locality'
    'district': ('<span class="accuracy-tag tag-locality">üó∫Ô∏è –†–∞–π–æ–Ω ‚Äî –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'locality'),
    'living_area': ('<span class="accuracy-tag tag-locality">üèòÔ∏è –ñ–∏–ª–æ–π —Ä–∞–π–æ–Ω ‚Äî –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'locality'),
    'place': ('<span class="accuracy-tag tag-locality">üìç –ú–µ—Å—Ç–æ ‚Äî –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'locality'),
    'gate': ('<span class="accuracy-tag tag-locality">üöß –í—ä–µ–∑–¥/–ö–ü–ü ‚Äî –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'locality'),
    'road': ('<span class="accuracy-tag tag-street">üõ£Ô∏è –î–æ—Ä–æ–≥–∞ ‚Äî –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'street'), # –î–æ—Ä–æ–≥–∞ -> –Ω–∏–∑–∫–∞—è -> street ? (–≤–æ–∑–º–æ–∂–Ω–æ, locality)

    # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å / –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ -> 'other'
    'region': ('<span class="accuracy-tag tag-other">üåç –†–µ–≥–∏–æ–Ω ‚Äî –æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'other'),
    'division': ('<span class="accuracy-tag tag-other">üåê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ ‚Äî –æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'other'),
    'settlement': ('<span class="accuracy-tag tag-other">üèòÔ∏è –ü–æ—Å–µ–ª–µ–Ω–∏–µ ‚Äî –æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'other'),
    'station': ('<span class="accuracy-tag tag-other">üöâ –°—Ç–∞–Ω—Ü–∏—è ‚Äî –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'other'),
    'hydro': ('<span class="accuracy-tag tag-other">üíß –ì–∏–¥—Ä–æ–æ–±—ä–µ–∫—Ç ‚Äî –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'other'),
    'railway_platform': ('<span class="accuracy-tag tag-other">üöÜ –ñ/–î –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ ‚Äî –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>', 'other'),

    # –û—à–∏–±–∫–∏ –∏ –ø—Ä–æ—á–µ–µ -> 'unknown', 'error', 'not_found'
    '': ('<span class="accuracy-tag tag-unknown">‚ùì –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ</span>', 'unknown'), # –ü—É—Å—Ç–æ–π —Ç–∏–ø
    'error': ('<span class="accuracy-tag tag-error">‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–µ—Ä–∞</span>', 'error'), # –¢–∏–ø –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    'not_found': ('<span class="accuracy-tag tag-error">ü§∑ –ù–µ –Ω–∞–π–¥–µ–Ω–æ</span>', 'not_found') # –¢–∏–ø –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
}

def geocode_address(address):
    """
    –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å —Å –ø–æ–º–æ—â—å—é API 2GIS.
    """
    params = {
        "q": address,
        "key": API_KEY,
        "fields": "items.point,items.type,items.name" # –î–æ–±–∞–≤–∏–ª–∏ items.name
    }
    
    result_template = {
        "input": address,
        "found": "",
        "type": "unknown", # –ö–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "description": TYPE_DESCRIPTIONS[''][0], # HTML –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "lat": "",
        "lon": "",
        "error": ""
    }

    try:
        response = requests.get(BASE_URL, params=params)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏
        data = response.json()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        result_template["error"] = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
        result_template["type"] = "error"
        result_template["description"] = TYPE_DESCRIPTIONS['error'][0]
        return result_template
    except json.JSONDecodeError:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ API. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.")
        result_template["error"] = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API"
        result_template["type"] = "error"
        result_template["description"] = TYPE_DESCRIPTIONS['error'][0]
        return result_template
    
    if not data.get("result") or not data["result"].get("items"):
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address}")
        result_template["error"] = "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        result_template["type"] = "not_found"
        result_template["description"] = TYPE_DESCRIPTIONS['not_found'][0]
        return result_template
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    item = data["result"]["items"][0]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ + –∫–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    item_type_from_api = item.get("type", "")
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ç–µ–∂ (–æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ–¥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Ç–∏–ø–∞
    description_html, type_category_code = TYPE_DESCRIPTIONS.get(item_type_from_api, TYPE_DESCRIPTIONS[''])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    point = item.get("point", {})
    lat = point.get("lat")
    lon = point.get("lon")
    
    if not lat or not lon:
        print(f"‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address}")
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–∏–ø 'not_found', –Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        result_template["error"] = "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        result_template["type"] = "not_found"
        result_template["description"] = TYPE_DESCRIPTIONS['not_found'][0] # –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ?
        return result_template
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç 
    found = item.get("name", address)
    result = {
        "input": address,
        "found": found,
        "type": type_category_code, # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ö–û–î –ö–ê–¢–ï–ì–û–†–ò–ò
        "description": description_html, # –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML –û–ü–ò–°–ê–ù–ò–ï
        "lat": lat,
        "lon": lon,
        "error": ""
    }
    
    print(f"‚úÖ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –∞–¥—Ä–µ—Å: {address} ‚Üí ({lat}, {lon}) [{type_category_code}]")
    return result

def main():
    parser = argparse.ArgumentParser(description="–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å–∞ —Å –ø–æ–º–æ—â—å—é API 2GIS")
    parser.add_argument("--parsed_file", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: parsed_addresses.csv)", default=None)
    parser.add_argument("--route_name", help="–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", default=None)
    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
    if args.parsed_file:
        input_path = args.parsed_file
    else:
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if args.route_name:
            safe_name = sanitize_filename(args.route_name)
            input_path = os.path.join(config.PARSED_DIR, f"parsed_addresses_{safe_name}.csv")
        else:
            input_path = os.path.join(config.PARSED_DIR, "parsed_addresses.csv")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    if args.route_name:
        safe_name = sanitize_filename(args.route_name)
        output_path = os.path.join(config.GEOCODED_DIR, f"geocoded_results_{safe_name}.csv")
    else:
        output_path = os.path.join(config.GEOCODED_DIR, "geocoded_results.csv")

    if not os.path.exists(input_path):
        print(f"‚ùå –§–∞–π–ª {input_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥ –º–∞—Ä—à—Ä—É—Ç–æ–≤.")
        sys.exit(1)

    with open(input_path, "r", encoding="utf-8") as infile, open(output_path, "w", encoding="utf-8", newline="") as outfile:
        reader = csv.DictReader(infile)
        writer = csv.DictWriter(outfile, fieldnames=["excel_row", "route_name", "input", "found", "type", "description", "lat", "lon", "error"])
        writer.writeheader()

        for row in reader:
            address = row["normalized_address"]
            result = geocode_address(address)
            writer.writerow({
                "excel_row": row["excel_row"],
                "route_name": row["route_name"],
                "input": result["input"],
                "found": result["found"],
                "type": result["type"],
                "description": result["description"],
                "lat": result["lat"],
                "lon": result["lon"],
                "error": result["error"]
                })

    print(f"‚úÖ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ {args.route_name or '–≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤'} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

if __name__ == "__main__":
    main()
