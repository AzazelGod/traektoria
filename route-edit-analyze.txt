# Чек-лист по реализации функционала редактирования точек маршрута

#Запрос пользователя
Хочу, чтобы была возможность скорректировать точки в уже посчитанном маршруте на 3 шаге. Вот у нас выводится таблица и результаты расчета. И бывает так, что точка определена неправильно или ошибочно указали в импортируемом файле. Сейчас у нас уже добавлен "карандашик", чтобы скорректировать адрес, и "кнопка пересчета". Но функционал этот не работает. Хочу, чтобы при изменении адресов и нажатии на кнопку пересчета новые адреса геокодировались и происходил пересчет выбранного маршрута. А также, чтобы была возможность добавить новую точку между строками. И чтобы стиль строки совпадал со стилем таблицы. Все должно выглядеть эстетически привлекательно. И чтобы после добавления новой строки и нового адреса, эта информация также учитывалась при нажатии на кнопку «Пересчет».

# Анализ задачи редактирования точек маршрута на шаге 3
## После анализа документации PIPELINE.md и запроса пользователя, я определил, что необходимо реализовать следующий функционал:
1. Активировать существующий элемент "карандашик" для редактирования адресов в таблице на шаге 3
2. Реализовать логику пересчета маршрута при нажатии на кнопку пересчета
3. Добавить возможность вставки новой точки между строками в таблице
4. Обеспечить согласованность стилей и эстетичность

## ЭТАП 1: Анализ и планирование

### 1.1 Анализ существующего интерфейса и логики
[x] Изучить HTML-структуру экрана результатов (step-3-content)
[x] Найти таблицу с геокодированными адресами и проанализировать её структуру
[x] Исследовать существующий "карандашик" для редактирования адресов
[x] Изучить реализацию кнопки пересчёта и её текущие обработчики
[x] Анализ отображения точек маршрута на карте Leaflet

### 1.2 Исследование JavaScript логики обработки данных
[x] Изучить функции, связанные с отображением результатов геокодирования
[x] Исследовать обработчики загрузки данных маршрута
[x] Анализ функций обновления содержимого таблицы
[x] Изучить обработчики событий клика и взаимодействия с элементами таблицы
[x] Исследовать логику пересчёта маршрута при нажатии на существующую кнопку

### 1.3 Анализ серверной логики
[x] Изучить обработчик запроса `/api/route-data/{route_name}`
[x] Исследовать процесс геокодирования адресов на сервере
[x] Изучить функции расчёта расстояний и времени маршрута
[x] Изучить структуру JSON-ответов и формат данных обмена
[x] Анализ существующих методов обновления данных маршрута

### 1.4 Определение точек изменения
[x] Определить, какие функции потребуется модифицировать для редактирования адресов
[x] Выявить возможные побочные эффекты при изменении существующего кода
[x] Идентифицировать оптимальные точки для внедрения нового функционала
[x] Составить список минимальных необходимых изменений в коде
[x] Выявить места, где потребуется добавить новый код, без изменения существующего

### 1.5 Сбор дополнительной информации от пользователя
[x] Определить, как именно должен выглядеть интерфейс редактирования (спросить у пользователя)
[x] Узнать, как должно выглядеть добавление новой точки между строками (инлайн или в модальном окне)
[x] Уточнить, нужно ли сохранять историю изменений адресов
[x] Определить, требуется ли возможность отмены внесенных изменений
[x] Уточнить, нужно ли подтверждение перед пересчетом маршрута
[x] Выяснить, требуется ли валидация новых/измененных адресов
[x] Узнать, нужно ли сохранять изменения при переключении между маршрутами

### 1.6 Анализ стилей и UI/UX
[x] Изучить существующие стили таблицы с адресами
[x] Исследовать дизайн и стилизацию других интерактивных элементов
[x] Определить, как стилизовать режим редактирования адреса
[x] Проанализировать, как оформить кнопку добавления новой точки
[x] Исследовать анимации для плавных переходов между состояниями

### 1.7 Планирование тестирования
[x] Определить сценарии тестирования редактирования адресов
[x] Спланировать проверку корректности пересчета маршрута
[x] Подготовить план тестирования добавления новых точек
[x] Продумать проверку граничных случаев (пустые адреса, некорректные данные)
[x] Разработать стратегию отката при неудачном редактировании

### 1.8 Оформление технического задания
[x] Составить детальное описание предлагаемых изменений в JavaScript
[x] Описать необходимые изменения в HTML-структуре
[x] Подготовить предложения по CSS-стилям новых элементов
[x] Описать необходимые изменения на стороне сервера
[x] Подготовить визуальные примеры или прототипы интерфейса
[x] Оценить временные затраты на реализацию каждого компонента 

## Результаты анализа по пункту 1.8

На основе проведенного анализа было подготовлено детальное техническое задание в отдельном файле "route-edit-technical-specification.txt", которое включает:

### Описание предлагаемых изменений в JavaScript
- Доработка функции `endEditAddress()` в step3_results.js для сохранения изменений
- Создание функций:
  * `addNewAddressRow()` для добавления новых точек
  * `toggleRowVisibility()` для скрытия точек из расчета
  * `validateAddresses()` для валидации перед пересчетом
  * `collectModifiedData()` для сбора данных перед отправкой

### Необходимые изменения в HTML
- Структура таблицы остается без изменений
- Добавление иконок "+" и "глаз" в соответствующие места при генерации строк таблицы

### CSS-стили новых элементов
- Стилизация кнопки "+" по аналогии с "карандашиком"
- Стилизация кнопки "глаз" с двумя состояниями
- Стили для подсветки ошибок валидации
- Анимации для плавных переходов

### Изменения на стороне сервера
- Создание нового API-эндпоинта для пересчета маршрута с измененными данными
- Оптимизация геокодирования только для измененных адресов
- Обновление структуры данных для поддержки скрытых точек

### Оценка временных затрат
- Клиентская часть: 40 часов
- Серверная часть: 26 часов
- Тестирование: 24 часа
- Общая оценка: 90 часов

Техническое задание также включает детальные функциональные требования, требования к пользовательскому интерфейсу, описание сценариев тестирования и стратегию отката при неудачном редактировании.

## Результаты анализа по пункту 1.1

### Структура экрана результатов
- Структура: `<div id="step-3-content">` содержит карту, информацию о маршруте, селектор и таблицу
- Layout: использует гибкую верстку через `results-layout` для распределения элементов

### Таблица с адресами
- Контейнер: `<div id="results-container">` с прокруткой (`table-scroll-wrapper`)
- Таблица: `<table class="table">` с `<tbody id="geocoder-table">`
- Колонки: №, Исходный адрес, Найденный адрес, Координаты, Точность
- Заполнение: динамическое через JavaScript, точка входа в app.js

### Кнопка редактирования ("карандашик")
- Реализация: SVG-иконка карандаша добавляется при создании строк таблицы
- HTML: `<span class="edit-icon">${pencilSvgIcon}</span>` рядом с адресом
- Стиль: скрыт по умолчанию, появляется при наведении на строку (opacity: 0 -> 1)
- Обработчик: функция `startEditAddress()` в step3_results.js, запускается при клике

### Кнопка пересчёта
- HTML: `<button id="recalculate-button" class="recalculate-btn">`
- Расположение: в блоке `route-info-header`
- Особенности: содержит `recalculate-lottie-container` для анимации
- Обработчики: определены в app.js

### Отображение точек на карте
- Карта: `<div id="map-container">` с инициализацией в `initMapContainer()`
- Отрисовка: `drawPolylineAndMarkersManually()` создает линии и маркеры
- Маркеры: создаются через `createMarker()` с разными типами (начальная/промежуточная/конечная)
- Очистка: `clearMapMarkers()` удаляет все маркеры с карты

---

## Результаты анализа по пункту 1.2

### Функции отображения результатов геокодирования
- Основная функция: `renderGeocodingResults(geocoderOutput)` в app.js 
- Обработка результатов: обрабатывает как офисы, так и обычные адреса
- Структура вывода: создаёт строки с информацией о точности геокодирования, координатах и адресе
- Особенности: включает добавление SVG-иконки карандаша для редактирования

### Обработчики загрузки данных маршрута
- Функция загрузки: `fetchRouteData(routeId)` запрашивает данные маршрута с сервера
- API запрос: использует `/api/route-data/{route_name}` для получения полной информации о маршруте
- Обработка данных: `updateDisplay(selectedRouteId)` в step3_results.js отвечает за обновление интерфейса
- Маршрутизация: `geocode_address` в geocoder.py обрабатывает серверные запросы на геокодирование

### Функции обновления содержимого таблицы
- Основная функция: `updateGeocoderTableDisplay(geocoderOutput)` обновляет содержимое таблицы
- Создание строк: генерирует HTML с помощью строковых шаблонов для каждой строки маршрута
- Форматирование: преобразует координаты в читаемый формат и добавляет индикаторы точности
- DOM-манипуляции: обновляет содержимое через `document.getElementById('geocoder-table').innerHTML`

### Обработчики событий взаимодействия
- Редактирование: функция `startEditAddress()` активируется при клике на карандаш
- Карта: установлены обработчики для перехода и масштабирования до выбранной точки маршрута
- Выбор маршрута: обработчик в селекторе маршрутов обновляет данные при смене маршрута
- Состояние ховера: CSS-переходы для отображения кнопки редактирования при наведении

### Логика пересчёта маршрута
- Кнопка: обработчик `document.getElementById('recalculate-button').addEventListener('click', ...)`
- Процесс: собирает все изменённые адреса, отправляет их на геокодирование и пересчёт
- Анимация: использует Lottie для отображения процесса пересчёта
- Обновление данных: после пересчёта обновляет таблицу и карту через обращение к серверному API

## Результаты анализа по пункту 1.3

### Обработчик запроса `/api/route-data/{route_name}`
- Основная функция: `get_route_data_endpoint(route_name)` в main.py
- Принцип работы: получает имя маршрута, загружает геокодированные данные и результаты расчета маршрута
- Форматирование: преобразует данные из файлов в JSON-формат для фронтенда
- Особенности: обрабатывает ошибки и отсутствие файлов, форматирует расстояния и время

### Процесс геокодирования адресов на сервере
- Основная функция: `geocode_address(address)` в geocoder.py
- API-запросы: использует 2GIS API для получения координат по адресу
- Точность геокодирования: определяет и отображает различные типы точности (здание, улица и т.д.)
- Обработка ошибок: корректно обрабатывает ошибки API и отсутствие результатов

### Функции расчёта расстояний и времени маршрута
- Основная функция: `calculate_and_save_route()` в route_distance.py
- Метод расчета: использует `calculate_route_in_chunks()` для расчета расстояний между последовательными точками
- API-запросы: использует матрицу расстояний 2GIS через `calculate_matrix_chunk()`
- Сохранение результатов: записывает данные в JSON-файл с расстояниями и временем для каждого сегмента

### Структура JSON-ответов и формат данных обмена
- Маршрутные данные: содержат `route_points` (точки маршрута с координатами и адресами)
- Данные о расстояниях: `distance_data` включает общее расстояние, время и информацию о сегментах
- Сегменты маршрута: каждый сегмент содержит индексы точек, координаты, расстояние и время
- Форматирование: данные включают как расчетные значения (в метрах/секундах), так и отформатированные для отображения

### Методы обновления данных маршрута
- Класс `RouteData`: содержит методы для работы с данными маршрутов
- Обновление маршрута: `add_route()` добавляет/обновляет данные маршрута
- Пересчет полей: `_recalculate_summary_fields()` обновляет вычисляемые поля (разница расстояний, общее время)
- Интерфейс обновления: `updateDisplay()` в step3_results.js обновляет отображение при изменении данных маршрута

## Результаты анализа по пункту 1.4

### Функции для модификации редактирования адресов
- Основная функция: `endEditAddress()` в step3_results.js требует доработки для сохранения изменений
- Обработчик события: нужно обновить обработчик клика для кнопки "карандашик" в геокодированных результатах
- Структура данных: необходимо внедрить структуру для хранения измененных адресов перед отправкой на пересчет
- DOM-манипуляции: функция обновления таблицы должна сохранять состояние редактирования при перерисовке

### Побочные эффекты при изменении кода
- Интерфейс пользователя: изменения могут нарушить плавность анимаций и переходов между состояниями
- Сохранение данных: новая логика редактирования может конфликтовать с существующим порядком обновления данных
- Пересчет маршрута: возможны несовпадения или потеря данных при обновлении маршрута с изменёнными адресами
- Карта: обновленные точки должны корректно отображаться на карте с учетом изменения последовательности

### Оптимальные точки для внедрения
- Добавление новой функции: необходим обработчик для создания новой строки между существующими
- Логика пересчета: функция `recalculateBtn.onclick` требует доработки для отправки измененных данных на сервер
- API-эндпоинт: необходимо создать новый эндпоинт или модифицировать существующий для пересчета с измененными адресами
- Структура данных: потребуется добавить поле для хранения измененных адресов в объекте маршрута

### Минимальные необходимые изменения
- JavaScript: доработка функций `endEditAddress()` и `startEditAddress()` для сохранения изменений
- Серверная часть: создание API-метода для геокодирования отдельных адресов и пересчета маршрута
- HTML/CSS: добавление кнопок или иконок для вставки новой строки между существующими
- Обработка данных: обновление механизма сбора данных для пересчета с учетом измененных и новых точек

### Места для добавления нового кода
- Добавление новой функции: `addNewAddressRow()` для вставки новой строки между существующими
- Создание обработчика: логика для сбора всех изменений перед отправкой на пересчет
- API-эндпоинт: `/api/recalculate-route` для обработки измененных данных маршрута
- Валидация: добавление проверок корректности введенных адресов перед отправкой на геокодирование

## Результаты анализа по пункту 1.5

### Интерфейс редактирования адресов
- Пользователя устраивает текущий способ редактирования через "карандашик" в ячейке
- Текущий визуальный индикатор измененных адресов подходит: очистка столбцов "Найденный адрес" и "Координаты", а в столбце "Точность" появляется надпись "❓ Требуется пересчет"

### Добавление новой точки между строками
- Требуется кнопка "+" между строками, которая должна появляться при наведении на строку
- Расположение: в правом верхнем углу строки (между выбранной строкой и строкой выше)
- Новая точка должна добавляться с пустым адресом
- При добавлении должна корректироваться нумерация строк (1, 2, 3, 4...)

### История изменений адресов
- Не требуется сохранение истории изменений адресов

### Отмена внесенных изменений
- Не требуется возможность отмены внесенных изменений после сохранения

### Подтверждение перед пересчетом
- Не требуется диалог подтверждения перед пересчетом маршрута

### Валидация новых/измененных адресов
- Требуется проверка заполненности поля адреса
- При пустом адресе: пересчет не срабатывает, ячейка с полем адреса подсвечивается светло-красным цветом
- Подсветка должна исчезать после ввода адреса

### Сохранение изменений при переключении маршрутов
- Изменения должны сохраняться при переключении между маршрутами
- Требуется предупреждение пользователя о несохраненных изменениях при переключении

### Дополнительный функционал
- Необходимо добавить кнопку "глаз" для скрытия строки из расчета
- Должна появляться слева при наведении на строку
- При нажатии строка становится полупрозрачной и не учитывается при пересчете

## Результаты анализа по пункту 1.6

### Существующие стили таблицы с адресами
- Таблица: использует класс `table` с фиксированной шириной столбцов и стилем `table-layout: fixed`
- Ячейки: имеют отступы `padding: 10px 15px`, границы между строками `border-bottom: 1px solid #e9ecef`
- Чередование цветов: используется стиль `tbody tr:nth-of-type(even)` для "зебры" со светло-серым фоном
- Адаптивность: имеется горизонтальная прокрутка для узких экранов `overflow-x: auto` в `.table-scroll-wrapper`

### Дизайн интерактивных элементов
- Карандаш редактирования: иконка SVG, скрыта по умолчанию (opacity: 0), появляется при наведении (opacity: 1)
- Кнопка пересчета: использует контейнер для Lottie-анимации и не имеет стандартного стиля кнопки
- Таблица: имеет интерактивные строки с эффектом наведения и анимацией появления новых строк
- Состояния: определены для активного, завершенного и будущего шагов процесса с соответствующими стилями

### Стилизация режима редактирования
- Поле ввода: при редактировании используется элемент `input[type="text"]` с наследованием шрифта таблицы
- Фокус: поле выделяется контуром цвета `var(--primary-color, #007bff)` при редактировании
- Отступы: удаляются стандартные отступы ячейки `td.editing { padding: 0; }` для точного позиционирования поля
- Размер: поле занимает 100% ширины ячейки с отступами, соответствующими отступам ячейки

### Оформление кнопки добавления точки
- Рекомендуемый стиль: кнопка "+" должна соответствовать дизайну "карандашика" (opacity: 0 -> 1 при наведении)
- Расположение: между строками, в правом верхнем углу выбранной строки
- Внешний вид: круглая кнопка с иконкой "+" и полупрозрачным фоном
- Поведение: появляется при наведении, имеет плавную анимацию появления/исчезновения

### Стилизация кнопки скрытия строки
- Рекомендуемый стиль: иконка "глаз" должна появляться слева при наведении на строку
- Состояния: два состояния (видимый/невидимый) с соответствующими иконками
- Эффект: при нажатии строка становится полупрозрачной (`opacity: 0.5`)
- Анимация: плавный переход между состояниями с использованием `transition: opacity 0.3s ease-out`

### Анимации для плавных переходов
- Ячейки: `transition: background-color 0.3s ease-in-out, opacity 0.3s ease-out` для плавных изменений
- Таблица: анимация высоты при добавлении/удалении строк через `transition: height 0.4s ease-out`
- Строки: анимация появления строк через transform и opacity: `opacity: 0; transform: translateY(15px);` -> `opacity: 1; transform: translateY(0);`
- Состояние пересчета: анимация пульсации `@keyframes pulse` и затемнение содержимого при пересчете

## Результаты анализа по пункту 1.7

### Сценарии тестирования редактирования адресов
- Базовый сценарий: редактирование адреса с заполнением корректных данных и проверкой сохранения
- Отмена редактирования: нажатие клавиши Escape во время редактирования должно вернуть исходное значение
- Изменение нескольких адресов: редактирование нескольких точек перед нажатием кнопки пересчета
- Интерфейс редактирования: проверка правильного отображения полей ввода, контуров и очистки соседних ячеек
- Сохранение при переключении: проверка сохранения изменений при переключении между маршрутами

### Проверка корректности пересчета маршрута
- Проверка последовательности: после пересчета точки должны отображаться в правильном порядке
- Обновление данных: проверка обновления координат, найденных адресов и информации о точности
- Визуализация на карте: маркеры на карте должны обновиться в соответствии с новыми координатами
- Обновление сводной информации: проверка корректного обновления расстояния, времени и общего времени маршрута
- Обработка ошибок: правильная обработка и отображение ошибок геокодирования или расчета маршрута

### План тестирования добавления новых точек
- Проверка интерфейса: правильное отображение кнопки "+" при наведении на строку
- Взаимодействие: при нажатии на кнопку должна добавляться новая строка с пустым полем ввода
- Валидация: проверка корректной валидации пустых адресов (подсветка красным)
- Нумерация: проверка обновления нумерации строк после добавления новой точки
- Пересчет с новыми точками: правильное включение новых точек в расчет маршрута

### Проверка граничных случаев
- Пустые адреса: проверка валидации и блокировки пересчета при наличии пустых строк
- Некорректные адреса: тестирование обработки адресов, которые не могут быть геокодированы
- Максимальное количество точек: проверка производительности и стабильности при большом количестве точек
- Дублирующиеся адреса: проверка корректной обработки повторяющихся адресов
- Специальные символы: тестирование с адресами, содержащими специальные символы или очень длинными адресами

### Стратегия отката при неудачном редактировании
- Локальное сохранение: хранение исходного состояния маршрута перед редактированием
- Обработка ошибок API: корректная обработка и отображение ошибок от серверного API при пересчете
- Ручной откат: возможность вернуться к исходному состоянию при ошибках с помощью обновления страницы
- Валидация перед отправкой: проверка всех данных перед отправкой на сервер для минимизации ошибок
- Изоляция ошибок: локализация ошибок для отдельных точек без влияния на весь маршрут