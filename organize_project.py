#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.
"""
import os
import shutil
import re
import argparse
from utils import sanitize_filename

def move_files_by_pattern(pattern, source_dir, target_dir, dry_run=False, verbose=False):
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—É, –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ —Ü–µ–ª–µ–≤—É—é."""
    if not os.path.exists(target_dir):
        if not dry_run:
            os.makedirs(target_dir, exist_ok=True)
        if verbose:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {target_dir}")
    
    moved_files = []
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—É
    for file_name in os.listdir(source_dir):
        if re.match(pattern, file_name):
            source_path = os.path.join(source_dir, file_name)
            target_path = os.path.join(target_dir, file_name)
            
            if not os.path.isfile(source_path):
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –≤ —Ü–µ–ª–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if os.path.exists(target_path):
                if verbose:
                    print(f"‚ö†Ô∏è –§–∞–π–ª {file_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {target_dir}")
                continue
            
            if not dry_run:
                shutil.move(source_path, target_path)
            
            moved_files.append((source_path, target_path))
            
            if verbose:
                print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω —Ñ–∞–π–ª {source_path} –≤ {target_path}")
    
    return moved_files

def organize_files(dry_run=False, verbose=False):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    root_dir = os.path.dirname(os.path.abspath(__file__))
    data_dir = os.path.join(root_dir, "data")
    geocoded_dir = os.path.join(data_dir, "geocoded_results")
    parsed_dir = os.path.join(data_dir, "parsed_addresses")
    route_results_dir = os.path.join(data_dir, "route_results")
    distance_matrix_dir = os.path.join(data_dir, "distance_matrix")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    for directory in [data_dir, geocoded_dir, parsed_dir, route_results_dir, distance_matrix_dir]:
        if not os.path.exists(directory) and not dry_run:
            os.makedirs(directory, exist_ok=True)
            if verbose:
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory}")
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø–∞–º
    # 1. –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    moved = move_files_by_pattern(r"geocoded_results.*\.csv", root_dir, geocoded_dir, dry_run, verbose)
    if verbose:
        print(f"üìä –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {len(moved)} —Ñ–∞–π–ª–æ–≤ —Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
    
    # 2. –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    moved = move_files_by_pattern(r"parsed_addresses.*\.csv", root_dir, parsed_dir, dry_run, verbose)
    if verbose:
        print(f"üìä –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {len(moved)} —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏")
    
    # 3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤
    moved = move_files_by_pattern(r"route_results.*\.json", root_dir, route_results_dir, dry_run, verbose)
    if verbose:
        print(f"üìä –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {len(moved)} —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤")
    
    # 4. –ú–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    moved = move_files_by_pattern(r"distance_matrix.*\.(csv|json)", root_dir, distance_matrix_dir, dry_run, verbose)
    if verbose:
        print(f"üìä –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {len(moved)} —Ñ–∞–π–ª–æ–≤ —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π")
    
    # 5. –ö—ç—à —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    if os.path.exists(os.path.join(root_dir, "distance_cache.json")) and not dry_run:
        shutil.move(
            os.path.join(root_dir, "distance_cache.json"),
            os.path.join(data_dir, "distance_cache.json")
        )
        if verbose:
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω —Ñ–∞–π–ª –∫—ç—à–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π")

def check_duplicate_files(verbose=False):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞."""
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
    def normalize_name(filename):
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ (route_results_, geocoded_results_ –∏ —Ç.–¥.)
        name_parts = filename.split('_', 2)
        if len(name_parts) < 3:
            return filename
        
        # –ë–µ—Ä–µ–º —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∏ –¥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        name_part = name_parts[2]
        if '.' in name_part:
            name_part = name_part.rsplit('.', 1)[0]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º - –∑–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ
        normalized = re.sub(r'_+', '_', name_part)
        normalized = normalized.replace(',', '')
        return normalized
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    root_dir = os.path.dirname(os.path.abspath(__file__))
    pattern = r'(route_results|geocoded_results|parsed_addresses|distance_matrix).*\.(json|csv)'
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–∞–º
    duplicates = {}
    
    for filename in os.listdir(root_dir):
        if re.match(pattern, filename):
            normalized_name = normalize_name(filename)
            if normalized_name not in duplicates:
                duplicates[normalized_name] = []
            duplicates[normalized_name].append(filename)
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö
    has_duplicates = False
    for name, files in duplicates.items():
        if len(files) > 1:
            has_duplicates = True
            if verbose:
                print(f"\nüìÇ –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è {name}:")
                for i, file in enumerate(files):
                    print(f"  {i+1}. {file}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                prefix = files[0].split('_', 2)[0] + '_' + files[0].split('_', 2)[1]
                extension = files[0].split('.')[-1]
                correct_name = f"{prefix}_{sanitize_filename(name)}.{extension}"
                
                print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∏–º—è: {correct_name}")
    
    if not has_duplicates and verbose:
        print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    
    return has_duplicates

def main():
    parser = argparse.ArgumentParser(description="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
    parser.add_argument("--dry-run", action="store_true", help="–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã, –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
    parser.add_argument("--check-duplicates", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞")
    parser.add_argument("--verbose", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤")
    
    args = parser.parse_args()
    
    if args.check_duplicates:
        check_duplicate_files(verbose=True)
    else:
        organize_files(dry_run=args.dry_run, verbose=args.verbose)
        
        if not args.dry_run:
            print("\n‚úÖ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã!")
        else:
            print("\nüìù –≠—Ç–æ –±—ã–ª –ø—Ä–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ --dry-run –¥–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.")

if __name__ == "__main__":
    main() 